/**
 * @author Doraemon
 * @name 常规签到爬取
 * @origin 红灯区
 * @version 1.1.0
 * @description 扫描某文档当天签到token
 * @rule ^(qdscan)$
 * @admin true
 * @public false
 * @priority 1000
 * @disable false
  说明：
    1、在红灯区同级目录创建一个文件夹，名字随意 如：自用插件

       常规签到扫描.js 放到自用插件中

    2、设置一些的变量

      （默认1天1豆）自定义签到监控别名
        set Doraemon regular_sign_scraping_alias xxx  

      （默认10s）自定义撤回时间
        set Doraemon regular_sign_scraping_wait xxx   
          
      （默认0）份数，如填50，则只筛选50份以上的数据 
        set Doraemon regular_sign_scraping_limit xxx 

      必填 文档地址（自己找文档地址）
        set Doraemon regular_sign_scraping_url xxx    

      必填 如果你要取 2天 3天的数据，则填 2,3
        set Doraemon regular_sign_scraping_regex xxx

      支持自定义时间：如4月25 （冗余，默认留空）
        set Doraemon regular_sign_scraping_custom_date xxx

        如果要删除命令： del Doraemon regular_sign_scraping_custom_date

      支持只取扫描结果的指定数量，比如扫到20个，你只想要保留7个（默认1000）
        set Doraemon regular_sign_scraping_result_limit 7

  ----------------------

  注意：
   1、简单测试可用
   2、无界超授可用
   3、自用插件
  ----------------------

  功能：
    1、每日定时扫描某常规签到token文档，自动匹配相关数据，省去人工的操作 （已实现）
    2、自动内联执行命令，触发 红灯区 店铺签到监控.js，执行相关任务 （已实现）
    3、通过自定义正则匹配 xxx份数据（份数太少，签了没意义 ）  （已实现）
    4、通过自定义设置匹配 具体的天数，比如我只要签2天的线报 （已实现）
  ----------------------

  更新日志：
      v1.0.0 插件上线
      v1.0.1 支持份数筛选
      2023.4.28 v1.0.2 支持处理未知深度的链接 比如 3天10豆下有多个链接
      2023.4.29 v1.0.3 支持一个线报中，多份数的过滤 如 3天10豆 7天100豆 100+50份，就按照总份数
      2023.5.5 v1.0.4 线报天数（regex） 支持一位或者多位
      2023.5.5 v1.0.5 内联执行 店铺签到清理 命令，具体功能详见 红灯区 - 店铺签到监控
      2023.5.6 v1.0.6 修改加密导致的bug
      2023.5.13 v1.0.7 修复cron 内联执行 店铺签到清理 造成的死循环问题， 改成静默执行
      2023.5.14 v1.0.8 所有参数改为读取内置数据库
      2023.5.15 v1.0.9 本地最新版本
      2023.6.27 v1.1.0 支持只取扫描结果的指定数量，比如扫到20个，你只想要保留7个
*/

//插件入口
module.exports = async s => {
  /** Code Encryption Block[419fd178b7a37c9eae7b7426c4a04203e718ff222f9d0ceb298295aedf4e5c07fd2ee38f9e0975c19ad3328f204b4db5d43b681c2cf4271b7c40617e0d98e1de283a31bbad3a5dc7dd9aca0094d6a7fb9bd1c3445e7cb1b757d045820cbdec0f6d824cdb6a916cee7d81996f34be4bf7e18e428c268327ef7fde8f4d4a3a3147c59a47d73845e937105d3ab7be0c7ec0c7136d53805b682421502dda8c403bb669692bf5f298271bcf89f5bfef3d6e4b455856358a891ccf6749bdd34c7019d2816f6d74c03fc2b92606f1772aa9cebd2f7ce1358930ff3ed52ce14df859fae2364105e4955a58acf618744ad1e688bb8d7fcab63269871e36e0a5c44803a5bdaaf61569c23a8f13dc5bd96d290f9c6a6d715b3d1084e832294da81cc0c12b2aa5c42ba0f82b725e8687a84d89c47f0f109d74f75eda4338b2478574a935ea9d962387bc76771907efe2b3feb93b3f32bce06b9f77e8039af6bbbdea97372273789d71e59edb3e221206ab2efe5538e224f87c3296a61fe62f5c516816f712ea61109eae3a30ef0c6b4f7c3cad9ed5c0a3d12e0493cbb1563416f0a191ee847db3c4f1b8c09a20b6afb1718444a7ea28bea74ecd8469ceca0d7f27705ec19993c658085c8744d8b872c6c1f4234d90cb2bda3ab0cd750acb40d7cd0f438dfb8b30877c26e32eb36fdb2935c80e7dae80ac754fecd9dbbe19d618909cf0d2e7cc42b3720a0d82f624ffe16ea2dd74dac3a58ade9afad9a7515b8409d75193c1796a373bbe0544100efe0f189eb71b5b68573a796290823c7e9841f8df393280923d2c2b219a00be34075be5cae16aec9980665b3671c6f11c3f9d26b9de266cf29de5fd1440fc9f5c19061f7f297fe3134e6cae65e8ccfef12bd7953620d1f41946571eaecd8472268d0ceb7b27d4e1e95ab09979e797adbf7dfb56c43d12f06ee80da70221d5a013b6d4c05fca73f6f388defdb0f0d5453fc75249b696d8c56498cdecf6a57ff6ce0de45cc724399acbf0d6c7023b4314d33cee1ffdc23ee0e079059a310e9083b904ecac039e452eadbfaf7c35f6bffd8dfd7848905dbc8ab1799c0b8a7964afc34a391c678fdcc5e2552ce6a42764a3d971211cea01c798a12bdf13895ff229881db31e1902be37de4839fddb8b59bf6766390dc90a35c567667b74faf1da641720f430f9d254e28499a576b81df366ca927b2616cfe9b1c62a03a91d9b0933f1f83aa4be74ffe19325df6fe81d5bb945d747cd89cf60a6425931987bc5ee1c403bdd31a8a709144037c748e7e644fab492b8753b7cb5c6772d82f01284457bdd0a8b5600f1c0224df70df1553c5636f9658777ba330972f688a172e070669ad2581abe59dd3a6ea0705f613f53e781ceed0b2e66c7bb1d4923aecdf3caf9daafde28bdb42f0ba7d742533b408668a3c85fc698be151396130cbc861eda592e047a225edb5e1fee941fe978bda44bb4382adcac5db5a02aa1da600fe53bb974c7daed5cfe2483c9a0e219208170119a517022b521719e8fc5278e440e80ba43f5550bc1e27185eb4a53942c81cd4ffabef996ae7de5e25de7bf7b285d38def851ce1fa86bb7a4de0477df59105307c1b9a83f26c739d89492b11ee2011d5087a4de92e6dd50d9cf86588c9974726e04f4642c35fcbab1fd020fe4b73ef811ba476d3ad046894b094194167be9018fe66619d1eaf299aa60f7c3b1d62756e35edb47da923d1471c92d6c921ca6af815c22e0f72473c58b97d34c8865f758d1d9597ba2c1a66a731f2317fae7150112e818f85bd350c74252804b09dee863cc675d486eb126bad26cc43d73e91899f1a1645411d806d410e0cd039dfff2781bc17b273329959faa578de0e73848f7f9d8f9e1e0955a40acd1c4b04aef6f68aa5c36bf94c9ed391b06a070f1047d9959f99cb24158d837830ef6ba7b3a4e31c90eec9ea1bac8402e4ac65094f3c50f5fb6589b82944dc384de1c861194d124d4a1b751378b3550fd6354bc3857a6f89e8d6ce90ed6e88340a33e4c0b5629e5a2361142d81dd45b2c0f340890358fd3adb9404005ab695d6682ecf1fe183cbdf7309f0d17a99e9770f71d87664c1e30d5c09f5d91e19fdc839ba75cfbb0058805594ada282ccaccd5a52376166ea3fa7b1f37717b087ce1b6d723b9eb2bb011497595daaf2bee72666435bef1668073ec4975f88304ff60e8668ae310791af3840acb11fba198e3017f305c0b15d378f5e3f5e799f67011b259773e5ad4df151fbe58913d17ba870988ba20c8d5a083b9810e57a703b2a4929087a61f7911c17393fe46868fd179ee12b291ff762e109b9b48a16d6b6956550552b1f797eb6364eb043f5f6ab71caeb3c46d73d13b129225e5aaeba54031afc7f0ad426283b76853e12e6b395e26c8289926f93243c5291a058fe13b4a5d4060e677dad125184a92c3ddeb6b13ce176f2807e75a86be4a13a742d43077b6aa8d02673f0cd4c39254e0ba4cfc5b69176d1f135983228cecd31597faaf7c84c557f66cf0a0a232608647a83e912299f61e76d37329d536fb93d1a42a0c2578675dbaf9c28629fe04d0e8ad1eca8cdcebfcb96a95d106aa403e4d8dd4c2e51f27c95b5eca8321a8052590145351ee94634891d2bbb3132359854c4d9610594237b42355b63725b977f83770302b7d7e6e3a4c8bdd1c20dae842cecf483addbe28e20393d9dd090ebc7258ddc928deda0b81e583dec003837f5b3b626858d87ebe62cbf45d190d35bc1d0f37115926214ceba7d64d5cd6a684af4e6b72dad0b4e8c78f63e9559631862d48b8898622052f359d9267fd33846cbd60a5671aa5fc86450de1d8132864df0e6399ab928d2a82355df5a772d14c04384763ef6622343f04d8affe23117496ab5ee43232306be93beffdd7870b54af91b8c2fcc5bfd4b0585ad5832c9567d1ab3d615b4e7231a20ad969c10162d726747ef56936d3e4c2e3018292cd27b83746dcffa99450d2cfa5b5c403178211462add11324f813c2cdea405e9a4760e2e89af49fac3e3b72fac3e1f1c7e6b3414f7eadebc318d4211611d6694371c17d69fcc59c2307200dddfa8e754fcfe227391517971bfc3dc4b4ddc9b182ceed5dc2d9e8ca205759ddb0e20335b98a4bd95088f4ae15136d34f932809903e49dc74bc196f0e83ac1a609b40aa598a8da8fb3a101e495da5bdd9ac463b9ae2ed4296d414e1653f8d1cefda139fbf5693da9ed61bd87c03decbfc5d79ea9afd4bf2900f33b6169ebd3b432dccf19f768c9fc1e42c3cc40166940e6cc6128891b75eb3b48883fd876e7d06d8a9650acde68c746c440392a5c945bc47021da323f667462394432735411907804984d6d9e7ca66fe7aba713c9a6202544e1282bd18099a0ced64b38b111db499772a0bfb8b93dcca980798dee5ea8a512f32b2e3828a6efb4a263ca7d1952e694d7423ffa841d051c2ae1d4fd3401d189633143b298ad10787d161fbbf1e1fffb8cbd35a9f94e15e0c17899f963a35fd3bd85bc880330fe89824d22a8986872085c997f81ba37e781dc678586e487e47d44caf63de73144a28474ad7416fab9c46bc9afd56e48c00b4d2f85c5b89b37a71e137524dd1b153cbd44d893823fd28604a44bc23eef75b79f1c8548066b60a20e9626f9226324bc9c1b140ba8551c14a554771fe4fd9c8e600244ae1a073cba734ae21b9163d807f688ceb08153ed2c65805c349b71aadf0088ca8607aa8bbb8794165a8f14999f13f02cbbadb7cf77ada4b5154e232b4a02669299373f95cd624bdefce9e87cb3e50c076c753e7b8301e6667da0e072043a5a02ba522e0beccb338a467b2ed4d8c9a3b86015ac0ee137a81fdbc216a6a007ca6542f48838695befe0f3d2e5badef538c8b5668c849daacf35da5267e56efcf5d7fae8ca14ac234d84852a4cb5876606b19e85ce3f28d7317885b5008fd5f084e7232eb476313caf4ebd3637170a751b67d78c9eec2e0c0b54e320743088c79a9d9f5589a47b21d76922435b3804b44e35ce383489c02b853406f11255c118f7de98e0ee7825192e257adac250a503579294c08dac95db162cfcacbee5bf82ac1eb36f62b4d1683334aa37b26c315cd0873647a55318cd637d1608ac847a736cbb440e5bd44b26ac7c2070de8bca351674fe778f7462962aee2e6c41ce946d78ed711228148e37f7bb41ae7fb6150472db81b336946c3215859dd3af65a62f2adbb9844a63fec] */

  /**
   * 递归查询
   * @param {*} nextP nextP
   * @param {*} result result
   * @returns 
   */
  function extractLinks(nextP, result) {
    if (nextP.text().match(/https:\/\/[A-Za-z0-9\-\._~:\/\?#\[\]@!$&'\*\+,%;\=]*/)) {
      result.push(nextP.text().trim());
      return extractLinks(nextP.next('p'), result);
    }
    return result;
  }
};
 